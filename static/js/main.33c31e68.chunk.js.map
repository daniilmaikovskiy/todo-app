{"version":3,"sources":["components/app/app-helper.js","components/app/settings.js","components/new-task-form/index.js","components/new-task-form/new-task-form.js","components/edit-input/index.js","components/edit-input/edit-input.js","components/icon-button/index.js","components/icon-button/icon-button.js","components/task/index.js","components/task/task.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/filter-button/index.js","components/filter-button/filter-button.js","components/tasks-filter/index.js","components/tasks-filter/tasks-filter.js","components/footer/index.js","components/footer/footer.js","components/app/index.js","components/app/app.js","index.js"],"names":["updateTasks","tasks","idx","newTaskProps","before","slice","after","DEFAULT_TASKS","id","className","description","created","Date","timer","active","min","sec","NewTaskForm","addNewTask","onChangeTask","onChangeSeconds","onChangeMinutes","value","seconds","minutes","style","display","onSubmit","e","preventDefault","name","onChange","target","placeholder","inputString","trim","number","Number","isNaN","Math","floor","toString","EditInput","isCompleted","onEdited","indexOf","input","type","trimLeft","defaultValue","IconButton","onClick","modifier","icon","Task","timerId","setTimerActive","props","clearInterval","this","decreaseTimer","setInterval","onDeleted","onCompleted","onClickEditButton","filter","isHidden","secStr","minStr","getTimerString","formatDistanceToNow","addSuffix","React","Component","TodoList","taskArr","map","taskData","taskProps","key","text","FilterButton","setFilter","TasksFilter","Footer","clearCompleted","completedCount","App","maxId","state","newTaskInput","newTaskSeconds","newTaskMinutes","setState","findIndex","el","currentTasks","getCompletedCount","reduce","acc","task","newText","length","createNewTask","onNewTaskInputChanged","onNewTaskSecondsChanged","onNewTaskMinutesChanged","newSec","newMin","newTimer","String","txt","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.33c31e68.chunk.js","sourcesContent":["const updateTasks = (tasks, idx, newTaskProps = null) => {\n  const before = tasks.slice(0, idx);\n  const after = tasks.slice(idx + 1);\n\n  if (newTaskProps === null) return [...before, ...after];\n\n  return [...before, { ...newTaskProps }, ...after];\n};\n\nexport { updateTasks as default };\n","export const DEFAULT_TASKS = [\n  {\n    id: 1,\n    className: 'completed',\n    description: 'Completed task',\n    created: new Date('June 21, 2020 10:24:18'),\n    timer: { active: false, min: '0', sec: '0' },\n  },\n  {\n    id: 2,\n    className: 'active-before-edit editing',\n    description: 'Editing task',\n    created: new Date('June 21, 2020 10:48:43'),\n    timer: { active: true, min: '10', sec: '0' },\n  },\n  {\n    id: 3,\n    className: 'active',\n    description: 'Active task',\n    created: new Date('June 21, 2020 11:17:21'),\n    timer: { active: true, min: '10', sec: '0' },\n  },\n];\n\nexport const DEFAULT_MAX_ID = 4;\n","import NewTaskForm from './new-task-form';\n\nexport default NewTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './new-task-form.css';\n\nexport default function NewTaskForm({\n  addNewTask,\n  onChangeTask,\n  onChangeSeconds,\n  onChangeMinutes,\n  value,\n  seconds,\n  minutes,\n}) {\n  const onSubmit = (e) => {\n    e.preventDefault();\n    addNewTask();\n  };\n\n  const onChangeSecondsInput = (e) => {\n    const inputString = e.target.value.trim();\n\n    if (inputString === '') {\n      onChangeSeconds('');\n      return;\n    }\n\n    const number = Number(inputString);\n\n    if (!Number.isNaN(number) && number < 60) {\n      onChangeSeconds(Math.floor(number).toString());\n    }\n  };\n\n  const onChangeMinutesInput = (e) => {\n    const inputString = e.target.value.trim();\n\n    if (inputString === '') {\n      onChangeMinutes('');\n      return;\n    }\n\n    const number = Number(inputString);\n\n    if (!Number.isNaN(number) && number < 100) {\n      onChangeMinutes(Math.floor(number).toString());\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <form onSubmit={onSubmit}>\n        <input\n          className=\"new-todo\"\n          name=\"input\"\n          value={value}\n          onChange={(e) => onChangeTask(e.target.value)}\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n      <input\n        name=\"minutes\"\n        className=\"new-todo-form__timer\"\n        placeholder=\"Min\"\n        value={minutes}\n        onChange={onChangeMinutesInput}\n      />\n      <input\n        name=\"seconds\"\n        className=\"new-todo-form__timer\"\n        placeholder=\"Sec\"\n        value={seconds}\n        onChange={onChangeSecondsInput}\n      />\n    </div>\n  );\n}\n\nNewTaskForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  seconds: PropTypes.string.isRequired,\n  minutes: PropTypes.string.isRequired,\n  addNewTask: PropTypes.func.isRequired,\n  onChangeTask: PropTypes.func.isRequired,\n  onChangeSeconds: PropTypes.func.isRequired,\n  onChangeMinutes: PropTypes.func.isRequired,\n};\n","import EditInput from './edit-input';\n\nexport default EditInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './edit-input.css';\n\nexport default function EditInput({ className, isCompleted, description, onEdited }) {\n  const onSubmit = (e) => {\n    e.preventDefault();\n    onEdited(e.target.input.value);\n  };\n  const onChange = (e) => {\n    e.target.value = e.target.value.trimLeft();\n  };\n\n  if (className.indexOf('editing') + 1) {\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          className={`edit edit-${isCompleted ? 'completed' : 'active'}`}\n          onChange={onChange}\n          defaultValue={description}\n          name=\"input\"\n        />\n      </form>\n    );\n  }\n\n  return null;\n}\n\nEditInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  onEdited: PropTypes.func.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n};\n","import IconButton from './icon-button';\n\nexport default IconButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './icon-button.css';\n\nexport default function IconButton({ onClick, modifier, icon }) {\n  return (\n    <button type=\"button\" className={`icon icon-${modifier}`} onClick={onClick}>\n      {icon}\n    </button>\n  );\n}\n\nIconButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  modifier: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n};\n","import Task from './task';\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './task.css';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport EditInput from '../edit-input';\nimport IconButton from '../icon-button';\n\nexport default class Task extends React.Component {\n  timerId = null;\n\n  componentDidMount() {\n    const { decreaseTimer, timer } = this.props;\n\n    if (timer.active) {\n      decreaseTimer(1);\n    }\n  }\n\n  componentDidUpdate() {\n    const { decreaseTimer, timer } = this.props;\n\n    if (!this.timerId) {\n      this.timerId = setInterval(() => {\n        if (timer.active) {\n          decreaseTimer(1);\n        } else {\n          clearInterval(this.timerId);\n          this.timerId = null;\n        }\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  setTimerActive = (value) => {\n    const { setTimerActive } = this.props;\n\n    clearInterval(this.timerId);\n    this.timerId = null;\n\n    setTimerActive(value);\n  };\n\n  render() {\n    const {\n      onDeleted,\n      onCompleted,\n      onClickEditButton,\n      onEdited,\n      className,\n      description,\n      created,\n      filter,\n      timer,\n    } = this.props;\n\n    const { setTimerActive } = this;\n\n    const isCompleted = className.indexOf('completed') + 1;\n    const isHidden =\n      (filter === 'completed' && !isCompleted) || (filter === 'active' && isCompleted);\n\n    const getTimerString = ({ min, sec }) => {\n      const secStr = sec < 10 ? `0${Number(sec)}` : sec;\n      const minStr = min < 10 ? `0${Number(min)}` : min;\n\n      return `${minStr}:${secStr}`;\n    };\n\n    return (\n      <li className={className + (isHidden ? ' hidden' : '')}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" />\n          <label>\n            <button type=\"button\" className=\"description\" onClick={onCompleted}>\n              {description}\n            </button>\n            <div className=\"timer-panel\">\n              <button\n                type=\"button\"\n                className=\"icon icon-play\"\n                onClick={() => {\n                  setTimerActive(true);\n                }}\n              >\n                ▶\n              </button>\n              <button\n                type=\"button\"\n                className=\"icon icon-pause\"\n                onClick={() => {\n                  setTimerActive(false);\n                }}\n              >\n                ⏸\n              </button>\n              <span className=\"time\">{getTimerString(timer)}</span>\n            </div>\n            <span className=\"created\">{formatDistanceToNow(created, { addSuffix: true })}</span>\n          </label>\n          <IconButton icon=\"✎\" modifier=\"edit\" onClick={onClickEditButton} />\n          <IconButton icon=\"×\" modifier=\"destroy\" onClick={onDeleted} />\n        </div>\n        <EditInput\n          className={className}\n          isCompleted={!!isCompleted}\n          description={description}\n          onEdited={onEdited}\n        />\n      </li>\n    );\n  }\n}\n\nTask.propTypes = {\n  onDeleted: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onClickEditButton: PropTypes.func.isRequired,\n  onEdited: PropTypes.func.isRequired,\n  decreaseTimer: PropTypes.func.isRequired,\n  setTimerActive: PropTypes.func.isRequired,\n\n  className: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  created: PropTypes.objectOf(Date).isRequired,\n  timer: PropTypes.shape({\n    active: PropTypes.bool.isRequired,\n    sec: PropTypes.string.isRequired,\n    min: PropTypes.string.isRequired,\n  }).isRequired,\n\n  filter: PropTypes.string.isRequired,\n};\n","import TodoList from './todo-list';\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './todo-list.css';\nimport Task from '../task';\n\nexport default function TodoList({\n  tasks,\n  filter,\n  onDeleted,\n  onEdited,\n  onCompleted,\n  onClickEditButton,\n  decreaseTimer,\n  setTimerActive,\n}) {\n  const taskArr = tasks.map((taskData) => {\n    const { id, ...taskProps } = taskData;\n\n    return (\n      <Task\n        key={id}\n        {...taskProps}\n        filter={filter}\n        onDeleted={() => onDeleted(id)}\n        onEdited={(text) => onEdited(id, text)}\n        onCompleted={() => {\n          onCompleted(id);\n        }}\n        onClickEditButton={() => {\n          onClickEditButton(id);\n        }}\n        decreaseTimer={(value) => {\n          decreaseTimer(id, value);\n        }}\n        setTimerActive={(value) => {\n          setTimerActive(id, value);\n        }}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{taskArr}</ul>;\n}\n\nTodoList.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      className: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      created: PropTypes.objectOf(Date).isRequired,\n      timer: PropTypes.shape({\n        active: PropTypes.bool.isRequired,\n        sec: PropTypes.string.isRequired,\n        min: PropTypes.string.isRequired,\n      }),\n    })\n  ).isRequired,\n\n  filter: PropTypes.string.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onEdited: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onClickEditButton: PropTypes.func.isRequired,\n  decreaseTimer: PropTypes.func.isRequired,\n  setTimerActive: PropTypes.func.isRequired,\n};\n","import FilterButton from './filter-button';\n\nexport default FilterButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './filter-button.css';\n\nexport default function FilterButton({ name, filter, setFilter }) {\n  const getClassName = () => `${name === filter ? 'selected ' : ''}first-upper-letter`;\n  const onClick = (e) => setFilter(e.target.name);\n\n  return (\n    <button type=\"button\" name={name} className={getClassName()} onClick={onClick}>\n      {name}\n    </button>\n  );\n}\n\nFilterButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import TasksFilter from './tasks-filter';\n\nexport default TasksFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tasks-filter.css';\nimport FilterButton from '../filter-button';\n\nexport default function TasksFilter({ filter, setFilter }) {\n  return (\n    <ul className=\"filters\">\n      <li>\n        <FilterButton name=\"all\" filter={filter} setFilter={setFilter} />\n      </li>\n      <li>\n        <FilterButton name=\"active\" filter={filter} setFilter={setFilter} />\n      </li>\n      <li>\n        <FilterButton name=\"completed\" filter={filter} setFilter={setFilter} />\n      </li>\n    </ul>\n  );\n}\n\nTasksFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import Footer from './footer';\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './footer.css';\nimport TasksFilter from '../tasks-filter';\n\nexport default function Footer({ setFilter, filter, clearCompleted, completedCount }) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{completedCount} items left</span>\n      <TasksFilter setFilter={setFilter} filter={filter} />\n      <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  completedCount: PropTypes.number.isRequired,\n};\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport './app.css';\nimport updateTasks from './app-helper';\nimport { DEFAULT_TASKS, DEFAULT_MAX_ID } from './settings';\nimport NewTaskForm from '../new-task-form';\nimport TodoList from '../todo-list';\nimport Footer from '../footer';\n\nexport default class App extends React.Component {\n  maxId = DEFAULT_MAX_ID;\n\n  state = {\n    tasks: DEFAULT_TASKS,\n    newTaskInput: '',\n    newTaskSeconds: '',\n    newTaskMinutes: '',\n    filter: 'all',\n  };\n\n  onDeleted = (id) =>\n    this.setState(({ tasks }) => ({\n      tasks: updateTasks(\n        tasks,\n        tasks.findIndex((el) => el.id === id)\n      ),\n    }));\n\n  clearCompleted = () => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex((el) => el.className.indexOf('completed') + 1);\n      let currentTasks = [...tasks];\n\n      while (idx + 1) {\n        currentTasks = updateTasks(currentTasks, idx);\n        idx = currentTasks.findIndex((el) => el.className.indexOf('completed') + 1);\n      }\n\n      return { tasks: currentTasks };\n    });\n  };\n\n  getCompletedCount = () => {\n    const { tasks } = this.state;\n\n    return tasks.reduce(\n      (acc, task) => (task.className.indexOf('completed') + 1 ? acc + 1 : acc),\n      0\n    );\n  };\n\n  onEdited = (id, text) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = tasks[idx].className.indexOf('completed') + 1 ? 'completed' : 'active';\n      let newText = text.trim();\n\n      newText = newText.length ? newText : tasks[idx].description;\n\n      return {\n        tasks: updateTasks(tasks, idx, {\n          ...tasks[idx],\n          description: newText,\n          className,\n        }),\n      };\n    });\n  };\n\n  onCompleted = (id) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = tasks[idx].className === 'completed' ? 'active' : 'completed';\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className }),\n      };\n    });\n  };\n\n  onClickEditButton = (id) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = `${tasks[idx].className}-before-edit editing`;\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className }),\n      };\n    });\n  };\n\n  addNewTask = () => {\n    const { newTaskInput, newTaskSeconds, newTaskMinutes } = this.state;\n\n    const text = newTaskInput.trim();\n\n    if (!text.length) return;\n\n    this.setState(({ tasks }) => ({\n      tasks: [...tasks, this.createNewTask(text, newTaskSeconds, newTaskMinutes)],\n      newTaskInput: '',\n      newTaskSeconds: '',\n      newTaskMinutes: '',\n    }));\n  };\n\n  onNewTaskInputChanged = (value) => this.setState({ newTaskInput: value });\n\n  onNewTaskSecondsChanged = (value) => this.setState({ newTaskSeconds: value });\n\n  onNewTaskMinutesChanged = (value) => this.setState({ newTaskMinutes: value });\n\n  setFilter = (value) => this.setState({ filter: value });\n\n  decreaseTimer = (id, value) => {\n    if (value >= 60 || value <= 0) return;\n\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const { timer } = tasks[idx];\n\n      let newSec = Number(timer.sec);\n      let newMin = Number(timer.min);\n      let active = true;\n\n      if (timer.sec >= value) {\n        newSec -= value;\n      } else if (timer.min > 0) {\n        newMin -= 1;\n        newSec += 60 - value;\n      } else {\n        newSec = '';\n        newMin = '';\n        active = false;\n      }\n\n      const newTimer = { active, sec: String(newSec), min: String(newMin) };\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], timer: newTimer }),\n      };\n    });\n  };\n\n  setTimerActive = (id, value) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const newTimer = { ...tasks[idx].timer, active: value };\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], timer: newTimer }),\n      };\n    });\n  };\n\n  createNewTask(txt, sec, min) {\n    const task = {\n      id: (this.maxId += 1),\n      className: 'active',\n      description: txt,\n      created: new Date(),\n      timer: { active: true, sec, min },\n    };\n\n    return task;\n  }\n\n  render() {\n    const { tasks, newTaskInput, newTaskSeconds, newTaskMinutes, filter } = this.state;\n    const {\n      addNewTask,\n      onNewTaskInputChanged,\n      onNewTaskSecondsChanged,\n      onNewTaskMinutesChanged,\n      onDeleted,\n      onEdited,\n      onClickEditButton,\n      onCompleted,\n      setFilter,\n      clearCompleted,\n      getCompletedCount,\n      decreaseTimer,\n      setTimerActive,\n    } = this;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm\n            addNewTask={addNewTask}\n            onChangeTask={onNewTaskInputChanged}\n            onChangeSeconds={onNewTaskSecondsChanged}\n            onChangeMinutes={onNewTaskMinutesChanged}\n            value={newTaskInput}\n            seconds={newTaskSeconds}\n            minutes={newTaskMinutes}\n          />\n        </header>\n        <section className=\"main\">\n          <TodoList\n            tasks={tasks}\n            filter={filter}\n            onDeleted={onDeleted}\n            onEdited={onEdited}\n            onCompleted={onCompleted}\n            onClickEditButton={onClickEditButton}\n            decreaseTimer={decreaseTimer}\n            setTimerActive={setTimerActive}\n          />\n          <Footer\n            setFilter={setFilter}\n            filter={filter}\n            clearCompleted={clearCompleted}\n            completedCount={getCompletedCount()}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}