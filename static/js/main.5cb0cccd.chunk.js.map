{"version":3,"sources":["components/app/app-helper.js","components/app/settings.js","components/new-task-form/index.js","components/new-task-form/new-task-form.js","components/edit-input/index.js","components/edit-input/edit-input.js","components/task/index.js","components/task/task.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/tasks-filter/index.js","components/tasks-filter/tasks-filter.js","components/footer/index.js","components/footer/footer.js","components/app/index.js","components/app/app.js","index.js"],"names":["updateTasks","tasks","idx","newTaskProps","before","slice","after","newTask","DEFAULT_TASKS","id","className","description","created","Date","NewTaskForm","onSubmit","e","preventDefault","props","addNewTask","target","input","value","onChange","this","name","placeholder","autoFocus","Component","EditInput","onEdited","trimLeft","isCompleted","indexOf","editClassName","type","defaultValue","Task","onDeleted","onCompleted","onClickEditButton","filter","isHidden","onClick","formatDistanceToNow","addSuffix","TodoList","taskArr","map","taskData","taskProps","key","text","TasksFilter","getClassName","setFilter","Footer","clearCompleted","completedCount","App","maxId","state","newTaskInput","setState","findIndex","el","currentTasks","getCompletedCount","reduce","acc","task","newText","trim","length","newTaskText","createNewTask","onNewTaskInputChanged","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.5cb0cccd.chunk.js","sourcesContent":["export const updateTasks = (tasks, idx, newTaskProps) => {\n    let before = tasks.slice(0, idx);\n    let after  = tasks.slice(idx + 1);\n\n    if (newTaskProps === null) return [ ...before, ...after ];\n\n    let newTask = { ...newTaskProps };\n\n    return [ ...before, newTask, ...after ];\n}","export const DEFAULT_TASKS = [\n    {\n      id: 1,\n      className: 'completed',\n      description: 'Completed task',\n      created: new Date('June 21, 2020 10:24:18'),\n    },\n    {\n      id: 2,\n      className: 'active-before-edit editing',\n      description: 'Editing task',\n      created: new Date('June 21, 2020 10:48:43'),\n    },\n    {\n      id: 3,\n      className: 'active',\n      description: 'Active task',\n      created: new Date('June 21, 2020 11:17:21'),\n    },\n];\n\nexport const DEFAULT_MAX_ID = 4;","import NewTaskForm from './new-task-form';\n\nexport default NewTaskForm;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './new-task-form.css';\n\nexport default class NewTaskForm extends Component {\n    static propTypes = {\n        value:      PropTypes.string.isRequired,\n        addNewTask: PropTypes.func.isRequired,\n        onChange:   PropTypes.func.isRequired,\n    }\n\n    onSubmit = e => {\n        e.preventDefault(); \n        this.props.addNewTask(e.target.input.value);\n    }\n\n    onChange = e => this.props.onChange(e.target.value)\n\n    render() {\n        let { value } = this.props;\n        let { onSubmit, onChange } = this;\n\n        return (\n            <form onSubmit={ onSubmit }>\n                <input className=\"new-todo\" name=\"input\" \n                    value={ value } \n                    onChange={ onChange }\n                    placeholder=\"What needs to be done?\" autoFocus />\n            </form>\n        );\n    }\n}","import EditInput from './edit-input';\n\nexport default EditInput;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './edit-input.css';\n\nexport default class EditInput extends Component {\n    static propTypes = {\n        className:   PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n        onEdited:    PropTypes.func.isRequired,\n        isCompleted: PropTypes.bool.isRequired,\n    }\n\n    onSubmit = e => {\n        e.preventDefault(); \n        this.props.onEdited(e.target.input.value);\n    }\n\n    onChange = e => e.target.value = e.target.value.trimLeft();\n\n    render() {\n        let { className, isCompleted, description } = this.props;\n        let { onSubmit, onChange } = this;\n\n        if (className.indexOf('editing') + 1) {\n            let secondClass = 'edit-' + (isCompleted ? 'completed' : 'active');\n            let editClassName = 'edit ' + secondClass;\n      \n            return (\n                <form onSubmit={ onSubmit }>\n                    <input type=\"text\" \n                        className={ editClassName } \n                        onChange={ onChange }\n                        defaultValue={ description } \n                        name='input' />\n                </form>\n            );\n        }\n      \n        return null;\n    }\n}","import Task from './task';\n\nexport default Task;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './task.css';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport EditInput from '../edit-input';\n\nexport default class Task extends Component {\n  static propTypes = {\n    onDeleted:         PropTypes.func.isRequired,\n    onCompleted:       PropTypes.func.isRequired,\n    onClickEditButton: PropTypes.func.isRequired,\n\n    className:   PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    created:     PropTypes.objectOf(Date).isRequired,\n\n    filter: PropTypes.string.isRequired,\n  }\n\n  render() {\n    let { onDeleted, onCompleted, onClickEditButton, onEdited,\n      className, description, created, filter } = this.props;\n\n    let isCompleted = className.indexOf('completed') + 1;\n    let isHidden = ((filter === 'completed' && !isCompleted) ||\n                    (filter === 'active' && isCompleted));\n      \n    return (\n      <li className={ className + (isHidden ? ' hidden' : '') }>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" />\n          <label onClick={ onCompleted }>\n            <span className=\"description\">{ description }</span>\n            <span className=\"created\">\n              { formatDistanceToNow(created, { addSuffix: true }) }\n            </span>\n          </label>\n          <button className=\"icon icon-edit\" onClick={ onClickEditButton }></button>\n          <button className=\"icon icon-destroy\" onClick={ onDeleted }></button>\n        </div>\n        <EditInput \n          className={ className } \n          isCompleted={ !!isCompleted } \n          description={ description }\n          onEdited={ onEdited } />\n      </li>\n    );\n  }\n}","import TodoList from './todo-list';\n\nexport default TodoList;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './todo-list.css';\nimport Task from '../task';\n\nexport default class TodoList extends Component {\n    static propTypes = {\n        tasks: PropTypes.arrayOf(PropTypes.shape({\n            id:          PropTypes.number.isRequired,\n            className:   PropTypes.string.isRequired,\n            description: PropTypes.string.isRequired,\n            created:     PropTypes.objectOf(Date).isRequired,\n        })).isRequired,\n\n        filter:            PropTypes.string.isRequired,\n        onDeleted:         PropTypes.func.isRequired,\n        onEdited:          PropTypes.func.isRequired,\n        onCompleted:       PropTypes.func.isRequired,\n        onClickEditButton: PropTypes.func.isRequired,\n    }\n\n    render() {\n        let { tasks, filter, onDeleted, onEdited, onCompleted, \n            onClickEditButton } = this.props;\n\n        const taskArr = tasks.map(taskData => {\n            let { id, ...taskProps } = taskData;\n            \n            return <Task key={ id } { ...taskProps } \n                filter={ filter }\n                onDeleted={ () => onDeleted(id) } \n                onEdited={ text => onEdited(id, text) } \n                onCompleted={ () => { onCompleted(id) } }\n                onClickEditButton={ () => { onClickEditButton(id) } } />\n        });\n            \n        return <ul className=\"todo-list\">{ taskArr }</ul>\n    }\n}","import TasksFilter from './tasks-filter';\n\nexport default TasksFilter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './tasks-filter.css';\n\nexport default class TasksFilter extends Component {\n  static propTypes = {\n    filter:    PropTypes.string.isRequired,\n    setFilter: PropTypes.func.isRequired,\n  }\n\n  getClassName = name => this.props.filter === name ? 'selected' : '';\n\n  onClick = e => this.props.setFilter(e.target.name);\n\n  render() {\n    let { getClassName, onClick } = this;\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          <button name='all' className={ getClassName('all') }\n          onClick={ onClick }>All</button>\n        </li>\n        <li>\n          <button name='active' className={ getClassName('active') }\n          onClick={ onClick }>Active</button>\n        </li>\n        <li>\n          <button name='completed' className={ getClassName('completed') }\n          onClick={ onClick }>Completed</button>\n        </li>\n      </ul>\n   );\n  }\n}","import Footer from './footer';\n\nexport default Footer;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './footer.css';\nimport TasksFilter from '../tasks-filter';\n\nexport default class Footer extends Component {\n    static propTypes = {\n        setFilter:      PropTypes.func.isRequired, \n        clearCompleted: PropTypes.func.isRequired, \n        filter:         PropTypes.string.isRequired, \n        completedCount: PropTypes.number.isRequired,\n    }\n\n    render() {\n        let { setFilter, filter, clearCompleted, completedCount } = this.props;\n\n        return (\n            <footer className=\"footer\">\n                <span className=\"todo-count\">{ completedCount } items left</span>\n                <TasksFilter setFilter={ setFilter } filter={ filter } />\n                <button className=\"clear-completed\" onClick={ clearCompleted } >\n                    Clear completed\n                </button>\n            </footer>\n        );\n    }\n}","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\nimport './app.css';\nimport { updateTasks } from './app-helper';\nimport { DEFAULT_TASKS, DEFAULT_MAX_ID } from './settings';\nimport NewTaskForm from '../new-task-form';\nimport TodoList from '../todo-list';\nimport Footer from '../footer';\n\nexport default class App extends Component {\n  maxId = DEFAULT_MAX_ID;\n  \n  state = {\n    tasks: DEFAULT_TASKS,\n    newTaskInput: '',\n    filter: 'all',\n  };\n\n  onDeleted = id => this.setState(({ tasks }) => \n    ({ tasks: updateTasks(tasks, tasks.findIndex(el => el.id === id), null) }));\n\n  clearCompleted = () => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.className.indexOf('completed') + 1);\n      let currentTasks = [ ...tasks ];\n\n      while (idx + 1) {\n        currentTasks = updateTasks(currentTasks, idx, null);\n        idx = currentTasks.findIndex(el => el.className.indexOf('completed') + 1);\n      }\n\n      return { tasks: currentTasks, };\n    });\n  }\n\n  getCompletedCount = () => \n    this.state.tasks.reduce((acc, task) => \n      task.className.indexOf('completed') + 1 ? acc + 1 : acc, 0);\n\n  onEdited = (id, text) => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className.indexOf('completed') + 1 ? 'completed' : 'active';\n      let newText = text.trim();\n\n      newText = newText.length ? newText : tasks[idx].description;\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], description: newText, className, })\n      };\n    });\n  }\n\n  onCompleted = id => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className === 'completed' ? 'active' : 'completed';\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className, })\n      };\n    });\n  }\n\n  onClickEditButton = id => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className + '-before-edit editing';\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className, })\n      };\n    });\n  }\n\n  createNewTask(text) {\n    return {\n      id: this.maxId++,\n      className: 'active',\n      description: text,\n      created: new Date(),\n    }\n  }\n\n  addNewTask = text => {\n    let newTaskText = text.trim();\n\n    if (!newTaskText.length) return;\n\n    this.setState(({ tasks }) => ({ \n      tasks: [...tasks, this.createNewTask(newTaskText)],\n      newTaskInput: '',\n    }));\n  }\n\n  onNewTaskInputChanged = value => this.setState({ newTaskInput: value });\n\n  setFilter = value => this.setState(({ filter: value, }));\n\n  render() {\n    let { tasks, newTaskInput, filter } = this.state;\n    let { addNewTask, onNewTaskInputChanged, onDeleted, onEdited, onClickEditButton, \n      onCompleted, setFilter, clearCompleted, getCompletedCount } = this;\n\n    return (\n      <section className='todoapp'>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm \n            addNewTask={ addNewTask } \n            onChange={ onNewTaskInputChanged }  \n            value={ newTaskInput } />\n        </header>\n        <section className='main'>\n            <TodoList \n              tasks={ tasks } \n              filter={ filter }\n              onDeleted={ onDeleted } \n              onEdited={ onEdited }\n              onCompleted={ onCompleted } \n              onClickEditButton={ onClickEditButton } />\n            <Footer \n              setFilter={ setFilter } \n              filter={ filter }\n              clearCompleted={ clearCompleted }\n              completedCount={ getCompletedCount() }/>\n        </section>\n      </section>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}