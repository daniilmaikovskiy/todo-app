{"version":3,"sources":["components/app/app-helper.js","components/app/settings.js","components/new-task-form/index.js","components/new-task-form/new-task-form.js","components/task/index.js","components/task/task.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/tasks-filter/index.js","components/tasks-filter/tasks-filter.js","components/footer/index.js","components/footer/footer.js","components/app/index.js","components/app/app.js","index.js"],"names":["updateTasks","tasks","idx","newTaskProps","before","slice","after","newTask","DEFAULT_TASKS","id","className","description","created","Date","NewTaskForm","addNewTask","onChange","value","onSubmit","e","preventDefault","target","input","name","placeholder","autoFocus","Task","onDeleted","onCompleted","onEdited","onClickEditButton","filter","isCompleted","indexOf","editInput","editClassName","type","trimLeft","defaultValue","isHidden","onClick","formatDistanceToNow","addSuffix","TodoList","taskArr","map","taskData","taskProps","key","text","TasksFilter","getClassName","props","setFilter","this","Component","Footer","clearCompleted","completedCount","App","maxId","state","newTaskInput","setState","findIndex","el","currentTasks","getCompletedCount","reduce","acc","task","newText","trim","length","newTaskText","createNewTask","onNewTaskInputChanged","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.adce272b.chunk.js","sourcesContent":["export const updateTasks = (tasks, idx, newTaskProps) => {\n    let before = tasks.slice(0, idx);\n    let after  = tasks.slice(idx + 1);\n\n    if (newTaskProps === null) return [ ...before, ...after ];\n\n    let newTask = { ...newTaskProps };\n\n    return [ ...before, newTask, ...after ];\n}","export const DEFAULT_TASKS = [\n    {\n      id: 1,\n      className: 'completed',\n      description: 'Completed task',\n      created: new Date('June 21, 2020 10:24:18'),\n    },\n    {\n      id: 2,\n      className: 'active-before-edit editing',\n      description: 'Editing task',\n      created: new Date('June 21, 2020 10:48:43'),\n    },\n    {\n      id: 3,\n      className: 'active',\n      description: 'Active task',\n      created: new Date('June 21, 2020 11:17:21'),\n    },\n];\n\nexport const DEFAULT_MAX_ID = 4;","import NewTaskForm from './new-task-form';\n\nexport default NewTaskForm;","import React from 'react';\nimport './new-task-form.css';\n\nexport default function NewTaskForm({ addNewTask, onChange, value }) {\n    return (\n        <header className=\"header\">\n            <h1>todos</h1>\n            <form onSubmit={ e => { e.preventDefault(); addNewTask(e.target.input.value) } }>\n                <input className=\"new-todo\" name=\"input\" \n                    value={ value } onChange={ e => { onChange(e.target.value) } }\n                    placeholder=\"What needs to be done?\" autoFocus />\n            </form>\n        </header>\n    );\n}","import Task from './task';\n\nexport default Task;","import React from 'react';\nimport './task.css';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\n\nexport default function Task(\n  { onDeleted, onCompleted, onEdited, onClickEditButton, \n    className, description, created, filter }) {\n  \n  let isCompleted = className.indexOf('completed') + 1;\n  let editInput = null;\n\n  if (className.indexOf('editing') + 1) {\n    let secondClass = 'edit-' + (isCompleted ? 'completed' : 'active');\n    let editClassName = 'edit ' + secondClass;\n\n    editInput = (\n      <form onSubmit={ e => { e.preventDefault(); onEdited(e.target.input.value) } }>\n        <input type=\"text\" className={ editClassName } \n          onChange={ e => e.target.value = e.target.value.trimLeft() }\n          defaultValue={ description } name='input' />\n      </form>\n    );\n  }\n\n  let isHidden = ((filter === 'completed' && !isCompleted) ||\n                  (filter === 'active' && isCompleted));\n    \n  return (\n    <li className={ className + (isHidden ? ' hidden' : '') }>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" />\n        <label onClick={ onCompleted }>\n          <span className=\"description\">{ description }</span>\n          <span className=\"created\">\n            { formatDistanceToNow(created, { addSuffix: true }) }\n          </span>\n        </label>\n        <button className=\"icon icon-edit\" onClick={ onClickEditButton }></button>\n        <button className=\"icon icon-destroy\" onClick={ onDeleted }></button>\n      </div>\n      { editInput }\n    </li>\n  );\n}","import TodoList from './todo-list';\n\nexport default TodoList;","import React from 'react';\nimport './todo-list.css';\nimport Task from '../task';\n\nexport default function TodoList(\n    { tasks, filter, onDeleted, onEdited, onCompleted, onClickEditButton }) {\n\n    const taskArr = tasks.map(taskData => {\n        let { id, ...taskProps } = taskData;\n    \n        return <Task key={ id } { ...taskProps } \n            filter={ filter }\n            onDeleted={ () => onDeleted(id) } \n            onEdited={ text => onEdited(id, text) } \n            onCompleted={ () => { onCompleted(id) } }\n            onClickEditButton={ () => { onClickEditButton(id) } } />\n    });\n    \n    return (\n        <ul className=\"todo-list\">\n            { taskArr }\n        </ul>\n    );\n}","import TasksFilter from './tasks-filter';\n\nexport default TasksFilter;","import React, { Component } from 'react';\nimport './tasks-filter.css';\n\nexport default class TasksFilter extends Component {\n\n  getClassName = name => this.props.filter === name ? 'selected' : '';\n\n  onClick = e => this.props.setFilter(e.target.name);\n\n  render() {\n    let { getClassName, onClick } = this;\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          <button name='all' className={ getClassName('all') }\n          onClick={ onClick }>All</button>\n        </li>\n        <li>\n          <button name='active' className={ getClassName('active') }\n          onClick={ onClick }>Active</button>\n        </li>\n        <li>\n          <button name='completed' className={ getClassName('completed') }\n          onClick={ onClick }>Completed</button>\n        </li>\n      </ul>\n   );\n  }\n\n\n    \n}","import Footer from './footer';\n\nexport default Footer;","import React from 'react';\nimport './footer.css';\nimport TasksFilter from '../tasks-filter';\n\nexport default function Footer({ setFilter, filter, clearCompleted, completedCount }) {\n    return (\n        <footer className=\"footer\">\n            <span className=\"todo-count\">{ completedCount } items left</span>\n            <TasksFilter setFilter={ setFilter } filter={ filter } />\n            <button className=\"clear-completed\" onClick={ clearCompleted } >\n                Clear completed\n            </button>\n        </footer>\n    );\n}","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\nimport './app.css';\nimport { updateTasks } from './app-helper';\nimport { DEFAULT_TASKS, DEFAULT_MAX_ID } from './settings';\nimport NewTaskForm from '../new-task-form';\nimport TodoList from '../todo-list';\nimport Footer from '../footer';\n\nexport default class App extends Component {\n  maxId = DEFAULT_MAX_ID;\n  \n  state = {\n    tasks: DEFAULT_TASKS,\n    newTaskInput: '',\n    filter: 'all',\n  };\n\n  onDeleted = id => this.setState(({ tasks }) => \n    ({ tasks: updateTasks(tasks, tasks.findIndex(el => el.id === id), null) }));\n\n  clearCompleted = () => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.className.indexOf('completed') + 1);\n      let currentTasks = [ ...tasks ];\n\n      while (idx + 1) {\n        currentTasks = updateTasks(currentTasks, idx, null);\n        idx = currentTasks.findIndex(el => el.className.indexOf('completed') + 1);\n      }\n\n      return { tasks: currentTasks, };\n    });\n  }\n\n  getCompletedCount = () => \n    this.state.tasks.reduce((acc, task) => \n      task.className.indexOf('completed') + 1 ? acc + 1 : acc, 0);\n\n  onEdited = (id, text) => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className.indexOf('completed') + 1 ? 'completed' : 'active';\n      let newText = text.trim();\n\n      newText = newText.length ? newText : tasks[idx].description;\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], description: newText, className, })\n      };\n    });\n  }\n\n  onCompleted = id => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className === 'completed' ? 'active' : 'completed';\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className, })\n      };\n    });\n  }\n\n  onClickEditButton = id => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex(el => el.id === id);\n      let className = tasks[idx].className + '-before-edit editing';\n\n      return { \n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className, })\n      };\n    });\n  }\n\n  createNewTask(text) {\n    return {\n      id: this.maxId++,\n      className: 'active',\n      description: text,\n      created: new Date(),\n    }\n  }\n\n  addNewTask = text => {\n    let newTaskText = text.trim();\n\n    if (!newTaskText.length) return;\n\n    this.setState(({ tasks }) => ({ \n      tasks: [...tasks, this.createNewTask(newTaskText)],\n      newTaskInput: '',\n    }));\n  }\n\n  onNewTaskInputChanged = value => this.setState({ newTaskInput: value });\n\n  setFilter = value => this.setState(({ filter: value, }));\n\n  render() {\n    let { tasks, newTaskInput, filter } = this.state;\n    let { addNewTask, onNewTaskInputChanged, onDeleted, onEdited, onClickEditButton, \n      onCompleted, setFilter, clearCompleted, getCompletedCount } = this;\n\n    return (\n      <section className='todoapp'>\n        <NewTaskForm \n          addNewTask={ addNewTask } \n          onChange={ onNewTaskInputChanged }  \n          value={ newTaskInput } />\n        <section className='main'>\n            <TodoList \n              tasks={ tasks } \n              filter={ filter }\n              onDeleted={ onDeleted } \n              onEdited={ onEdited }\n              onCompleted={ onCompleted } \n              onClickEditButton={ onClickEditButton } />\n            <Footer \n              setFilter={ setFilter } \n              filter={ filter }\n              clearCompleted={ clearCompleted }\n              completedCount={ getCompletedCount() }/>\n        </section>\n      </section>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}