{"version":3,"sources":["components/app/app-helper.js","components/app/settings.js","components/new-task-form/index.js","components/new-task-form/new-task-form.js","components/edit-input/index.js","components/edit-input/edit-input.js","components/icon-button/index.js","components/icon-button/icon-button.js","components/task/index.js","components/task/task.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/filter-button/index.js","components/filter-button/filter-button.js","components/tasks-filter/index.js","components/tasks-filter/tasks-filter.js","components/footer/index.js","components/footer/footer.js","components/app/index.js","components/app/app.js","index.js"],"names":["updateTasks","tasks","idx","newTaskProps","before","slice","after","DEFAULT_TASKS","id","className","description","created","Date","NewTaskForm","addNewTask","onChange","value","onSubmit","e","preventDefault","target","input","name","placeholder","EditInput","isCompleted","onEdited","indexOf","type","trimLeft","defaultValue","IconButton","onClick","modifier","icon","Task","onDeleted","onCompleted","onClickEditButton","filter","isHidden","formatDistanceToNow","addSuffix","TodoList","taskArr","map","taskData","taskProps","key","text","FilterButton","setFilter","TasksFilter","Footer","clearCompleted","completedCount","App","maxId","state","newTaskInput","setState","findIndex","el","currentTasks","getCompletedCount","reduce","acc","task","newText","trim","length","newTaskText","createNewTask","onNewTaskInputChanged","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d0b1fea2.chunk.js","sourcesContent":["const updateTasks = (tasks, idx, newTaskProps = null) => {\n  const before = tasks.slice(0, idx);\n  const after = tasks.slice(idx + 1);\n\n  if (newTaskProps === null) return [...before, ...after];\n\n  return [...before, { ...newTaskProps }, ...after];\n};\n\nexport { updateTasks as default };\n","export const DEFAULT_TASKS = [\n  {\n    id: 1,\n    className: 'completed',\n    description: 'Completed task',\n    created: new Date('June 21, 2020 10:24:18'),\n  },\n  {\n    id: 2,\n    className: 'active-before-edit editing',\n    description: 'Editing task',\n    created: new Date('June 21, 2020 10:48:43'),\n  },\n  {\n    id: 3,\n    className: 'active',\n    description: 'Active task',\n    created: new Date('June 21, 2020 11:17:21'),\n  },\n];\n\nexport const DEFAULT_MAX_ID = 4;\n","import NewTaskForm from './new-task-form';\n\nexport default NewTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './new-task-form.css';\n\nexport default function NewTaskForm({ addNewTask, onChange, value }) {\n  const onSubmit = (e) => {\n    e.preventDefault();\n    addNewTask(e.target.input.value);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        className=\"new-todo\"\n        name=\"input\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n}\n\nNewTaskForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  addNewTask: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import EditInput from './edit-input';\n\nexport default EditInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './edit-input.css';\n\nexport default function EditInput({ className, isCompleted, description, onEdited }) {\n  const onSubmit = (e) => {\n    e.preventDefault();\n    onEdited(e.target.input.value);\n  };\n  const onChange = (e) => {\n    e.target.value = e.target.value.trimLeft();\n  };\n\n  if (className.indexOf('editing') + 1) {\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          className={`edit edit-${isCompleted ? 'completed' : 'active'}`}\n          onChange={onChange}\n          defaultValue={description}\n          name=\"input\"\n        />\n      </form>\n    );\n  }\n\n  return null;\n}\n\nEditInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  onEdited: PropTypes.func.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n};\n","import IconButton from './icon-button';\n\nexport default IconButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './icon-button.css';\n\nexport default function IconButton({ onClick, modifier, icon }) {\n  return (\n    <button type=\"button\" className={`icon icon-${modifier}`} onClick={onClick}>\n      {icon}\n    </button>\n  );\n}\n\nIconButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  modifier: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n};\n","import Task from './task';\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './task.css';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport EditInput from '../edit-input';\nimport IconButton from '../icon-button';\n\nexport default function Task({\n  onDeleted,\n  onCompleted,\n  onClickEditButton,\n  onEdited,\n  className,\n  description,\n  created,\n  filter,\n}) {\n  const isCompleted = className.indexOf('completed') + 1;\n  const isHidden = (filter === 'completed' && !isCompleted) || (filter === 'active' && isCompleted);\n\n  return (\n    <li className={className + (isHidden ? ' hidden' : '')}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" />\n        <label>\n          <button type=\"button\" className=\"description\" onClick={onCompleted}>\n            {description}\n          </button>\n          <span className=\"created\">{formatDistanceToNow(created, { addSuffix: true })}</span>\n        </label>\n        <IconButton icon=\"✎\" modifier=\"edit\" onClick={onClickEditButton} />\n        <IconButton icon=\"×\" modifier=\"destroy\" onClick={onDeleted} />\n      </div>\n      <EditInput\n        className={className}\n        isCompleted={!!isCompleted}\n        description={description}\n        onEdited={onEdited}\n      />\n    </li>\n  );\n}\n\nTask.propTypes = {\n  onDeleted: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onClickEditButton: PropTypes.func.isRequired,\n  onEdited: PropTypes.func.isRequired,\n\n  className: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  created: PropTypes.objectOf(Date).isRequired,\n\n  filter: PropTypes.string.isRequired,\n};\n","import TodoList from './todo-list';\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './todo-list.css';\nimport Task from '../task';\n\nexport default function TodoList({\n  tasks,\n  filter,\n  onDeleted,\n  onEdited,\n  onCompleted,\n  onClickEditButton,\n}) {\n  const taskArr = tasks.map((taskData) => {\n    const { id, ...taskProps } = taskData;\n\n    return (\n      <Task\n        key={id}\n        {...taskProps}\n        filter={filter}\n        onDeleted={() => onDeleted(id)}\n        onEdited={(text) => onEdited(id, text)}\n        onCompleted={() => {\n          onCompleted(id);\n        }}\n        onClickEditButton={() => {\n          onClickEditButton(id);\n        }}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{taskArr}</ul>;\n}\n\nTodoList.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      className: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      created: PropTypes.objectOf(Date).isRequired,\n    })\n  ).isRequired,\n\n  filter: PropTypes.string.isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onEdited: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func.isRequired,\n  onClickEditButton: PropTypes.func.isRequired,\n};\n","import FilterButton from './filter-button';\n\nexport default FilterButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './filter-button.css';\n\nexport default function FilterButton({ name, filter, setFilter }) {\n  const getClassName = () => `${name === filter ? 'selected ' : ''}first-upper-letter`;\n  const onClick = (e) => setFilter(e.target.name);\n\n  return (\n    <button type=\"button\" name={name} className={getClassName()} onClick={onClick}>\n      {name}\n    </button>\n  );\n}\n\nFilterButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import TasksFilter from './tasks-filter';\n\nexport default TasksFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tasks-filter.css';\nimport FilterButton from '../filter-button';\n\nexport default function TasksFilter({ filter, setFilter }) {\n  return (\n    <ul className=\"filters\">\n      <li>\n        <FilterButton name=\"all\" filter={filter} setFilter={setFilter} />\n      </li>\n      <li>\n        <FilterButton name=\"active\" filter={filter} setFilter={setFilter} />\n      </li>\n      <li>\n        <FilterButton name=\"completed\" filter={filter} setFilter={setFilter} />\n      </li>\n    </ul>\n  );\n}\n\nTasksFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import Footer from './footer';\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './footer.css';\nimport TasksFilter from '../tasks-filter';\n\nexport default function Footer({ setFilter, filter, clearCompleted, completedCount }) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{completedCount} items left</span>\n      <TasksFilter setFilter={setFilter} filter={filter} />\n      <button type=\"button\" className=\"clear-completed\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  completedCount: PropTypes.number.isRequired,\n};\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport './app.css';\nimport updateTasks from './app-helper';\nimport { DEFAULT_TASKS, DEFAULT_MAX_ID } from './settings';\nimport NewTaskForm from '../new-task-form';\nimport TodoList from '../todo-list';\nimport Footer from '../footer';\n\nexport default class App extends React.Component {\n  maxId = DEFAULT_MAX_ID;\n\n  state = {\n    tasks: DEFAULT_TASKS,\n    newTaskInput: '',\n    filter: 'all',\n  };\n\n  onDeleted = (id) =>\n    this.setState(({ tasks }) => ({\n      tasks: updateTasks(\n        tasks,\n        tasks.findIndex((el) => el.id === id)\n      ),\n    }));\n\n  clearCompleted = () => {\n    this.setState(({ tasks }) => {\n      let idx = tasks.findIndex((el) => el.className.indexOf('completed') + 1);\n      let currentTasks = [...tasks];\n\n      while (idx + 1) {\n        currentTasks = updateTasks(currentTasks, idx);\n        idx = currentTasks.findIndex((el) => el.className.indexOf('completed') + 1);\n      }\n\n      return { tasks: currentTasks };\n    });\n  };\n\n  getCompletedCount = () => {\n    const { tasks } = this.state;\n\n    return tasks.reduce(\n      (acc, task) => (task.className.indexOf('completed') + 1 ? acc + 1 : acc),\n      0\n    );\n  };\n\n  onEdited = (id, text) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = tasks[idx].className.indexOf('completed') + 1 ? 'completed' : 'active';\n      let newText = text.trim();\n\n      newText = newText.length ? newText : tasks[idx].description;\n\n      return {\n        tasks: updateTasks(tasks, idx, {\n          ...tasks[idx],\n          description: newText,\n          className,\n        }),\n      };\n    });\n  };\n\n  onCompleted = (id) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = tasks[idx].className === 'completed' ? 'active' : 'completed';\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className }),\n      };\n    });\n  };\n\n  onClickEditButton = (id) => {\n    this.setState(({ tasks }) => {\n      const idx = tasks.findIndex((el) => el.id === id);\n      const className = `${tasks[idx].className}-before-edit editing`;\n\n      return {\n        tasks: updateTasks(tasks, idx, { ...tasks[idx], className }),\n      };\n    });\n  };\n\n  addNewTask = (text) => {\n    const newTaskText = text.trim();\n\n    if (!newTaskText.length) return;\n\n    this.setState(({ tasks }) => ({\n      tasks: [...tasks, this.createNewTask(newTaskText)],\n      newTaskInput: '',\n    }));\n  };\n\n  onNewTaskInputChanged = (value) => this.setState({ newTaskInput: value });\n\n  setFilter = (value) => this.setState({ filter: value });\n\n  createNewTask(text) {\n    const task = {\n      id: (this.maxId += 1),\n      className: 'active',\n      description: text,\n      created: new Date(),\n    };\n\n    return task;\n  }\n\n  render() {\n    const { tasks, newTaskInput, filter } = this.state;\n    const {\n      addNewTask,\n      onNewTaskInputChanged,\n      onDeleted,\n      onEdited,\n      onClickEditButton,\n      onCompleted,\n      setFilter,\n      clearCompleted,\n      getCompletedCount,\n    } = this;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm\n            addNewTask={addNewTask}\n            onChange={onNewTaskInputChanged}\n            value={newTaskInput}\n          />\n        </header>\n        <section className=\"main\">\n          <TodoList\n            tasks={tasks}\n            filter={filter}\n            onDeleted={onDeleted}\n            onEdited={onEdited}\n            onCompleted={onCompleted}\n            onClickEditButton={onClickEditButton}\n          />\n          <Footer\n            setFilter={setFilter}\n            filter={filter}\n            clearCompleted={clearCompleted}\n            completedCount={getCompletedCount()}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}